{"sourceMap":"{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"\"}","contents":"FuseBox.pkg(\"fuse-box-websocket\", {}, function(___scope___){\n___scope___.file(\"index.js\", function(exports, require, module){\nconst events = require(\"events\");\nfunction log(text) {\n  console.info(`%c${text}`, \"color: #237abe\");\n}\nclass SocketClient {\n  constructor(opts) {\n    opts = opts || ({});\n    const port = opts.port || window.location.port;\n    const protocol = location.protocol === \"https:\" ? \"wss://\" : \"ws://\";\n    const domain = location.hostname || \"localhost\";\n    if (opts.connectionURL) {\n      this.url = opts.connectionURL;\n    } else {\n      if (opts.useCurrentURL) {\n        this.url = protocol + location.hostname + (location.port ? \":\" + location.port : \"\");\n      }\n      if (opts.port) {\n        this.url = `${protocol}${domain}:${opts.port}`;\n      }\n    }\n    this.authSent = false;\n    this.emitter = new events.EventEmitter();\n  }\n  reconnect(fn) {\n    setTimeout(() => {\n      this.emitter.emit(\"reconnect\", {\n        message: \"Trying to reconnect\"\n      });\n      this.connect(fn);\n    }, 5000);\n  }\n  on(event, fn) {\n    this.emitter.on(event, fn);\n  }\n  connect(fn) {\n    setTimeout(() => {\n      log(`Connecting to FuseBox HMR at ${this.url}`);\n      this.client = new WebSocket(this.url);\n      this.bindEvents(fn);\n    }, 0);\n  }\n  close() {\n    this.client.close();\n  }\n  send(eventName, data) {\n    if (this.client.readyState === 1) {\n      this.client.send(JSON.stringify({\n        name: eventName,\n        payload: data || ({})\n      }));\n    }\n  }\n  error(data) {\n    this.emitter.emit(\"error\", data);\n  }\n  bindEvents(fn) {\n    this.client.onopen = event => {\n      log(\"Connection successful\");\n      if (fn) {\n        fn(this);\n      }\n    };\n    this.client.onerror = event => {\n      this.error({\n        reason: event.reason,\n        message: \"Socket error\"\n      });\n    };\n    this.client.onclose = event => {\n      this.emitter.emit(\"close\", {\n        message: \"Socket closed\"\n      });\n      if (event.code !== 1011) {\n        this.reconnect(fn);\n      }\n    };\n    this.client.onmessage = event => {\n      let data = event.data;\n      if (data) {\n        let item = JSON.parse(data);\n        this.emitter.emit(item.name, item.payload);\n      }\n    };\n  }\n}\nexports.SocketClient = SocketClient;\n\n});\n\t___scope___.entry = \"index.js\";\n})"}