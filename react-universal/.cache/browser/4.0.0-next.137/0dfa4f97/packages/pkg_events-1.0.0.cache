{"sourceMap":"{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"\"}","contents":"FuseBox.pkg(\"events\", {}, function(___scope___){\n___scope___.file(\"index.js\", function(exports, require, module){\nif (FuseBox.isServer) {\n  module.exports = global.require(\"events\");\n} else {\n  function EventEmitter() {\n    this._events = this._events || ({});\n    this._maxListeners = this._maxListeners || undefined;\n  }\n  module.exports = EventEmitter;\n  EventEmitter.EventEmitter = EventEmitter;\n  EventEmitter.prototype._events = undefined;\n  EventEmitter.prototype._maxListeners = undefined;\n  EventEmitter.defaultMaxListeners = 10;\n  EventEmitter.prototype.setMaxListeners = function (n) {\n    if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError(\"n must be a positive number\");\n    this._maxListeners = n;\n    return this;\n  };\n  EventEmitter.prototype.emit = function (type) {\n    var er, handler, len, args, i, listeners;\n    if (!this._events) this._events = {};\n    if (type === \"error\") {\n      if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {\n        er = arguments[1];\n        if (er instanceof Error) {\n          throw er;\n        }\n        throw TypeError(\"Uncaught, unspecified \\\"error\\\" event.\");\n      }\n    }\n    handler = this._events[type];\n    if (isUndefined(handler)) return false;\n    if (isFunction(handler)) {\n      switch (arguments.length) {\n        case 1:\n          handler.call(this);\n          break;\n        case 2:\n          handler.call(this, arguments[1]);\n          break;\n        case 3:\n          handler.call(this, arguments[1], arguments[2]);\n          break;\n        default:\n          args = Array.prototype.slice.call(arguments, 1);\n          handler.apply(this, args);\n      }\n    } else if (isObject(handler)) {\n      args = Array.prototype.slice.call(arguments, 1);\n      listeners = handler.slice();\n      len = listeners.length;\n      for (i = 0; i < len; i++) listeners[i].apply(this, args);\n    }\n    return true;\n  };\n  EventEmitter.prototype.addListener = function (type, listener) {\n    var m;\n    if (!isFunction(listener)) throw TypeError(\"listener must be a function\");\n    if (!this._events) this._events = {};\n    if (this._events.newListener) this.emit(\"newListener\", type, isFunction(listener.listener) ? listener.listener : listener);\n    if (!this._events[type]) this._events[type] = listener; else if (isObject(this._events[type])) this._events[type].push(listener); else this._events[type] = [this._events[type], listener];\n    if (isObject(this._events[type]) && !this._events[type].warned) {\n      if (!isUndefined(this._maxListeners)) {\n        m = this._maxListeners;\n      } else {\n        m = EventEmitter.defaultMaxListeners;\n      }\n      if (m && m > 0 && this._events[type].length > m) {\n        this._events[type].warned = true;\n        console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", this._events[type].length);\n        if (typeof console.trace === \"function\") {\n          console.trace();\n        }\n      }\n    }\n    return this;\n  };\n  EventEmitter.prototype.on = EventEmitter.prototype.addListener;\n  EventEmitter.prototype.once = function (type, listener) {\n    if (!isFunction(listener)) throw TypeError(\"listener must be a function\");\n    var fired = false;\n    function g() {\n      this.removeListener(type, g);\n      if (!fired) {\n        fired = true;\n        listener.apply(this, arguments);\n      }\n    }\n    g.listener = listener;\n    this.on(type, g);\n    return this;\n  };\n  EventEmitter.prototype.removeListener = function (type, listener) {\n    var list, position, length, i;\n    if (!isFunction(listener)) throw TypeError(\"listener must be a function\");\n    if (!this._events || !this._events[type]) return this;\n    list = this._events[type];\n    length = list.length;\n    position = -1;\n    if (list === listener || isFunction(list.listener) && list.listener === listener) {\n      delete this._events[type];\n      if (this._events.removeListener) this.emit(\"removeListener\", type, listener);\n    } else if (isObject(list)) {\n      for (i = length; i-- > 0; ) {\n        if (list[i] === listener || list[i].listener && list[i].listener === listener) {\n          position = i;\n          break;\n        }\n      }\n      if (position < 0) return this;\n      if (list.length === 1) {\n        list.length = 0;\n        delete this._events[type];\n      } else {\n        list.splice(position, 1);\n      }\n      if (this._events.removeListener) this.emit(\"removeListener\", type, listener);\n    }\n    return this;\n  };\n  EventEmitter.prototype.removeAllListeners = function (type) {\n    var key, listeners;\n    if (!this._events) return this;\n    if (!this._events.removeListener) {\n      if (arguments.length === 0) this._events = {}; else if (this._events[type]) delete this._events[type];\n      return this;\n    }\n    if (arguments.length === 0) {\n      for (key in this._events) {\n        if (key === \"removeListener\") continue;\n        this.removeAllListeners(key);\n      }\n      this.removeAllListeners(\"removeListener\");\n      this._events = {};\n      return this;\n    }\n    listeners = this._events[type];\n    if (isFunction(listeners)) {\n      this.removeListener(type, listeners);\n    } else if (listeners) {\n      while (listeners.length) this.removeListener(type, listeners[listeners.length - 1]);\n    }\n    delete this._events[type];\n    return this;\n  };\n  EventEmitter.prototype.listeners = function (type) {\n    var ret;\n    if (!this._events || !this._events[type]) ret = []; else if (isFunction(this._events[type])) ret = [this._events[type]]; else ret = this._events[type].slice();\n    return ret;\n  };\n  EventEmitter.prototype.listenerCount = function (type) {\n    if (this._events) {\n      var evlistener = this._events[type];\n      if (isFunction(evlistener)) return 1; else if (evlistener) return evlistener.length;\n    }\n    return 0;\n  };\n  EventEmitter.listenerCount = function (emitter, type) {\n    return emitter.listenerCount(type);\n  };\n  function isFunction(arg) {\n    return typeof arg === \"function\";\n  }\n  function isNumber(arg) {\n    return typeof arg === \"number\";\n  }\n  function isObject(arg) {\n    return typeof arg === \"object\" && arg !== null;\n  }\n  function isUndefined(arg) {\n    return arg === void 0;\n  }\n}\n\n});\n\t___scope___.entry = \"index.js\";\n})"}