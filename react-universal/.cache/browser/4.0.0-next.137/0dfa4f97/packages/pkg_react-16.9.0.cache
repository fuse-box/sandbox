{"sourceMap":"{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"\"}","contents":"FuseBox.pkg(\"react\", {}, function(___scope___){\n___scope___.file(\"index.js\", function(exports, require, module){\nvar process = require(\"process\");\n\"use strict\";\nif (process.env.NODE_ENV === \"production\") {\n  module.exports = require(\"./cjs/react.production.min.js\");\n} else {\n  module.exports = require(\"./cjs/react.development.js\");\n}\n\n});\n___scope___.file(\"cjs/react.production.min.js\", function(exports, require, module){\n\"use strict\";\nvar h = require(\"object-assign\"), n = \"function\" === typeof Symbol && Symbol.for, p = n ? Symbol.for(\"react.element\") : 60103, q = n ? Symbol.for(\"react.portal\") : 60106, r = n ? Symbol.for(\"react.fragment\") : 60107, t = n ? Symbol.for(\"react.strict_mode\") : 60108, u = n ? Symbol.for(\"react.profiler\") : 60114, v = n ? Symbol.for(\"react.provider\") : 60109, w = n ? Symbol.for(\"react.context\") : 60110, x = n ? Symbol.for(\"react.forward_ref\") : 60112, y = n ? Symbol.for(\"react.suspense\") : 60113, aa = n ? Symbol.for(\"react.suspense_list\") : 60120, ba = n ? Symbol.for(\"react.memo\") : 60115, ca = n ? Symbol.for(\"react.lazy\") : 60116;\nn && Symbol.for(\"react.fundamental\");\nn && Symbol.for(\"react.responder\");\nvar z = \"function\" === typeof Symbol && Symbol.iterator;\nfunction A(a) {\n  for (var b = a.message, d = \"https://reactjs.org/docs/error-decoder.html?invariant=\" + b, c = 1; c < arguments.length; c++) d += \"&args[]=\" + encodeURIComponent(arguments[c]);\n  a.message = \"Minified React error #\" + b + \"; visit \" + d + \" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. \";\n  return a;\n}\nvar B = {\n  isMounted: function () {\n    return !1;\n  },\n  enqueueForceUpdate: function () {},\n  enqueueReplaceState: function () {},\n  enqueueSetState: function () {}\n}, C = {};\nfunction D(a, b, d) {\n  this.props = a;\n  this.context = b;\n  this.refs = C;\n  this.updater = d || B;\n}\nD.prototype.isReactComponent = {};\nD.prototype.setState = function (a, b) {\n  if (\"object\" !== typeof a && \"function\" !== typeof a && null != a) throw A(Error(85));\n  this.updater.enqueueSetState(this, a, b, \"setState\");\n};\nD.prototype.forceUpdate = function (a) {\n  this.updater.enqueueForceUpdate(this, a, \"forceUpdate\");\n};\nfunction E() {}\nE.prototype = D.prototype;\nfunction F(a, b, d) {\n  this.props = a;\n  this.context = b;\n  this.refs = C;\n  this.updater = d || B;\n}\nvar G = F.prototype = new E();\nG.constructor = F;\nh(G, D.prototype);\nG.isPureReactComponent = !0;\nvar H = {\n  current: null\n}, I = {\n  suspense: null\n}, J = {\n  current: null\n}, K = Object.prototype.hasOwnProperty, L = {\n  key: !0,\n  ref: !0,\n  __self: !0,\n  __source: !0\n};\nfunction M(a, b, d) {\n  var c = void 0, e = {}, g = null, k = null;\n  if (null != b) for (c in (void 0 !== b.ref && (k = b.ref), void 0 !== b.key && (g = \"\" + b.key), b)) K.call(b, c) && !L.hasOwnProperty(c) && (e[c] = b[c]);\n  var f = arguments.length - 2;\n  if (1 === f) e.children = d; else if (1 < f) {\n    for (var l = Array(f), m = 0; m < f; m++) l[m] = arguments[m + 2];\n    e.children = l;\n  }\n  if (a && a.defaultProps) for (c in (f = a.defaultProps, f)) void 0 === e[c] && (e[c] = f[c]);\n  return {\n    $$typeof: p,\n    type: a,\n    key: g,\n    ref: k,\n    props: e,\n    _owner: J.current\n  };\n}\nfunction da(a, b) {\n  return {\n    $$typeof: p,\n    type: a.type,\n    key: b,\n    ref: a.ref,\n    props: a.props,\n    _owner: a._owner\n  };\n}\nfunction N(a) {\n  return \"object\" === typeof a && null !== a && a.$$typeof === p;\n}\nfunction escape(a) {\n  var b = {\n    \"=\": \"=0\",\n    \":\": \"=2\"\n  };\n  return \"$\" + (\"\" + a).replace(/[=:]/g, function (a) {\n    return b[a];\n  });\n}\nvar O = /\\/+/g, P = [];\nfunction Q(a, b, d, c) {\n  if (P.length) {\n    var e = P.pop();\n    e.result = a;\n    e.keyPrefix = b;\n    e.func = d;\n    e.context = c;\n    e.count = 0;\n    return e;\n  }\n  return {\n    result: a,\n    keyPrefix: b,\n    func: d,\n    context: c,\n    count: 0\n  };\n}\nfunction R(a) {\n  a.result = null;\n  a.keyPrefix = null;\n  a.func = null;\n  a.context = null;\n  a.count = 0;\n  10 > P.length && P.push(a);\n}\nfunction S(a, b, d, c) {\n  var e = typeof a;\n  if (\"undefined\" === e || \"boolean\" === e) a = null;\n  var g = !1;\n  if (null === a) g = !0; else switch (e) {\n    case \"string\":\n    case \"number\":\n      g = !0;\n      break;\n    case \"object\":\n      switch (a.$$typeof) {\n        case p:\n        case q:\n          g = !0;\n      }\n  }\n  if (g) return (d(c, a, \"\" === b ? \".\" + T(a, 0) : b), 1);\n  g = 0;\n  b = \"\" === b ? \".\" : b + \":\";\n  if (Array.isArray(a)) for (var k = 0; k < a.length; k++) {\n    e = a[k];\n    var f = b + T(e, k);\n    g += S(e, f, d, c);\n  } else if ((null === a || \"object\" !== typeof a ? f = null : (f = z && a[z] || a[\"@@iterator\"], f = \"function\" === typeof f ? f : null), \"function\" === typeof f)) for ((a = f.call(a), k = 0); !(e = a.next()).done; ) (e = e.value, f = b + T(e, k++), g += S(e, f, d, c)); else if (\"object\" === e) throw (d = \"\" + a, A(Error(31), \"[object Object]\" === d ? \"object with keys {\" + Object.keys(a).join(\", \") + \"}\" : d, \"\"));\n  return g;\n}\nfunction U(a, b, d) {\n  return null == a ? 0 : S(a, \"\", b, d);\n}\nfunction T(a, b) {\n  return \"object\" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);\n}\nfunction ea(a, b) {\n  a.func.call(a.context, b, a.count++);\n}\nfunction fa(a, b, d) {\n  var c = a.result, e = a.keyPrefix;\n  a = a.func.call(a.context, b, a.count++);\n  Array.isArray(a) ? V(a, c, d, function (a) {\n    return a;\n  }) : null != a && (N(a) && (a = da(a, e + (!a.key || b && b.key === a.key ? \"\" : (\"\" + a.key).replace(O, \"$&/\") + \"/\") + d)), c.push(a));\n}\nfunction V(a, b, d, c, e) {\n  var g = \"\";\n  null != d && (g = (\"\" + d).replace(O, \"$&/\") + \"/\");\n  b = Q(b, g, c, e);\n  U(a, fa, b);\n  R(b);\n}\nfunction W() {\n  var a = H.current;\n  if (null === a) throw A(Error(321));\n  return a;\n}\nvar X = {\n  Children: {\n    map: function (a, b, d) {\n      if (null == a) return a;\n      var c = [];\n      V(a, c, null, b, d);\n      return c;\n    },\n    forEach: function (a, b, d) {\n      if (null == a) return a;\n      b = Q(null, null, b, d);\n      U(a, ea, b);\n      R(b);\n    },\n    count: function (a) {\n      return U(a, function () {\n        return null;\n      }, null);\n    },\n    toArray: function (a) {\n      var b = [];\n      V(a, b, null, function (a) {\n        return a;\n      });\n      return b;\n    },\n    only: function (a) {\n      if (!N(a)) throw A(Error(143));\n      return a;\n    }\n  },\n  createRef: function () {\n    return {\n      current: null\n    };\n  },\n  Component: D,\n  PureComponent: F,\n  createContext: function (a, b) {\n    void 0 === b && (b = null);\n    a = {\n      $$typeof: w,\n      _calculateChangedBits: b,\n      _currentValue: a,\n      _currentValue2: a,\n      _threadCount: 0,\n      Provider: null,\n      Consumer: null\n    };\n    a.Provider = {\n      $$typeof: v,\n      _context: a\n    };\n    return a.Consumer = a;\n  },\n  forwardRef: function (a) {\n    return {\n      $$typeof: x,\n      render: a\n    };\n  },\n  lazy: function (a) {\n    return {\n      $$typeof: ca,\n      _ctor: a,\n      _status: -1,\n      _result: null\n    };\n  },\n  memo: function (a, b) {\n    return {\n      $$typeof: ba,\n      type: a,\n      compare: void 0 === b ? null : b\n    };\n  },\n  useCallback: function (a, b) {\n    return W().useCallback(a, b);\n  },\n  useContext: function (a, b) {\n    return W().useContext(a, b);\n  },\n  useEffect: function (a, b) {\n    return W().useEffect(a, b);\n  },\n  useImperativeHandle: function (a, b, d) {\n    return W().useImperativeHandle(a, b, d);\n  },\n  useDebugValue: function () {},\n  useLayoutEffect: function (a, b) {\n    return W().useLayoutEffect(a, b);\n  },\n  useMemo: function (a, b) {\n    return W().useMemo(a, b);\n  },\n  useReducer: function (a, b, d) {\n    return W().useReducer(a, b, d);\n  },\n  useRef: function (a) {\n    return W().useRef(a);\n  },\n  useState: function (a) {\n    return W().useState(a);\n  },\n  Fragment: r,\n  Profiler: u,\n  StrictMode: t,\n  Suspense: y,\n  unstable_SuspenseList: aa,\n  createElement: M,\n  cloneElement: function (a, b, d) {\n    if (null === a || void 0 === a) throw A(Error(267), a);\n    var c = void 0, e = h({}, a.props), g = a.key, k = a.ref, f = a._owner;\n    if (null != b) {\n      void 0 !== b.ref && (k = b.ref, f = J.current);\n      void 0 !== b.key && (g = \"\" + b.key);\n      var l = void 0;\n      a.type && a.type.defaultProps && (l = a.type.defaultProps);\n      for (c in b) K.call(b, c) && !L.hasOwnProperty(c) && (e[c] = void 0 === b[c] && void 0 !== l ? l[c] : b[c]);\n    }\n    c = arguments.length - 2;\n    if (1 === c) e.children = d; else if (1 < c) {\n      l = Array(c);\n      for (var m = 0; m < c; m++) l[m] = arguments[m + 2];\n      e.children = l;\n    }\n    return {\n      $$typeof: p,\n      type: a.type,\n      key: g,\n      ref: k,\n      props: e,\n      _owner: f\n    };\n  },\n  createFactory: function (a) {\n    var b = M.bind(null, a);\n    b.type = a;\n    return b;\n  },\n  isValidElement: N,\n  version: \"16.9.0\",\n  unstable_withSuspenseConfig: function (a, b) {\n    var d = I.suspense;\n    I.suspense = void 0 === b ? null : b;\n    try {\n      a();\n    } finally {\n      I.suspense = d;\n    }\n  },\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {\n    ReactCurrentDispatcher: H,\n    ReactCurrentBatchConfig: I,\n    ReactCurrentOwner: J,\n    IsSomeRendererActing: {\n      current: !1\n    },\n    assign: h\n  }\n}, Y = {\n  default: X\n}, Z = Y && X || Y;\nmodule.exports = Z.default || Z;\n\n});\n___scope___.file(\"cjs/react.development.js\", function(exports, require, module){\nvar process = require(\"process\");\n\"use strict\";\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    \"use strict\";\n    var _assign = require(\"object-assign\");\n    var checkPropTypes = require(\"prop-types/checkPropTypes\");\n    var ReactVersion = \"16.9.0\";\n    var hasSymbol = typeof Symbol === \"function\" && Symbol.for;\n    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for(\"react.element\") : 60103;\n    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for(\"react.portal\") : 60106;\n    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for(\"react.fragment\") : 60107;\n    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for(\"react.strict_mode\") : 60108;\n    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for(\"react.profiler\") : 60114;\n    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for(\"react.provider\") : 60109;\n    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for(\"react.context\") : 60110;\n    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for(\"react.concurrent_mode\") : 60111;\n    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for(\"react.forward_ref\") : 60112;\n    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for(\"react.suspense\") : 60113;\n    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for(\"react.suspense_list\") : 60120;\n    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for(\"react.memo\") : 60115;\n    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for(\"react.lazy\") : 60116;\n    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for(\"react.fundamental\") : 60117;\n    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for(\"react.responder\") : 60118;\n    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === \"function\" && Symbol.iterator;\n    var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n    function getIteratorFn(maybeIterable) {\n      if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n        return null;\n      }\n      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n      if (typeof maybeIterator === \"function\") {\n        return maybeIterator;\n      }\n      return null;\n    }\n    function ReactError(error) {\n      error.name = \"Invariant Violation\";\n      return error;\n    }\n    var lowPriorityWarning = function () {};\n    {\n      var printWarning = function (format) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        var argIndex = 0;\n        var message = \"Warning: \" + format.replace(/%s/g, function () {\n          return args[argIndex++];\n        });\n        if (typeof console !== \"undefined\") {\n          console.warn(message);\n        }\n        try {\n          throw new Error(message);\n        } catch (x) {}\n      };\n      lowPriorityWarning = function (condition, format) {\n        if (format === undefined) {\n          throw new Error(\"`lowPriorityWarning(condition, format, ...args)` requires a warning \" + \"message argument\");\n        }\n        if (!condition) {\n          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n            args[_key2 - 2] = arguments[_key2];\n          }\n          printWarning.apply(undefined, [format].concat(args));\n        }\n      };\n    }\n    var lowPriorityWarning$1 = lowPriorityWarning;\n    var warningWithoutStack = function () {};\n    {\n      warningWithoutStack = function (condition, format) {\n        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n          args[_key - 2] = arguments[_key];\n        }\n        if (format === undefined) {\n          throw new Error(\"`warningWithoutStack(condition, format, ...args)` requires a warning \" + \"message argument\");\n        }\n        if (args.length > 8) {\n          throw new Error(\"warningWithoutStack() currently supports at most 8 arguments.\");\n        }\n        if (condition) {\n          return;\n        }\n        if (typeof console !== \"undefined\") {\n          var argsWithFormat = args.map(function (item) {\n            return \"\" + item;\n          });\n          argsWithFormat.unshift(\"Warning: \" + format);\n          Function.prototype.apply.call(console.error, console, argsWithFormat);\n        }\n        try {\n          var argIndex = 0;\n          var message = \"Warning: \" + format.replace(/%s/g, function () {\n            return args[argIndex++];\n          });\n          throw new Error(message);\n        } catch (x) {}\n      };\n    }\n    var warningWithoutStack$1 = warningWithoutStack;\n    var didWarnStateUpdateForUnmountedComponent = {};\n    function warnNoop(publicInstance, callerName) {\n      {\n        var _constructor = publicInstance.constructor;\n        var componentName = _constructor && (_constructor.displayName || _constructor.name) || \"ReactClass\";\n        var warningKey = componentName + \".\" + callerName;\n        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n          return;\n        }\n        warningWithoutStack$1(false, \"Can't call %s on a component that is not yet mounted. \" + \"This is a no-op, but it might indicate a bug in your application. \" + \"Instead, assign to `this.state` directly or define a `state = {};` \" + \"class property with the desired state in the %s component.\", callerName, componentName);\n        didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n      }\n    }\n    var ReactNoopUpdateQueue = {\n      isMounted: function (publicInstance) {\n        return false;\n      },\n      enqueueForceUpdate: function (publicInstance, callback, callerName) {\n        warnNoop(publicInstance, \"forceUpdate\");\n      },\n      enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n        warnNoop(publicInstance, \"replaceState\");\n      },\n      enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n        warnNoop(publicInstance, \"setState\");\n      }\n    };\n    var emptyObject = {};\n    {\n      Object.freeze(emptyObject);\n    }\n    function Component(props, context, updater) {\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n    }\n    Component.prototype.isReactComponent = {};\n    Component.prototype.setState = function (partialState, callback) {\n      (function () {\n        if (!(typeof partialState === \"object\" || typeof partialState === \"function\" || partialState == null)) {\n          {\n            throw ReactError(Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\"));\n          }\n        }\n      })();\n      this.updater.enqueueSetState(this, partialState, callback, \"setState\");\n    };\n    Component.prototype.forceUpdate = function (callback) {\n      this.updater.enqueueForceUpdate(this, callback, \"forceUpdate\");\n    };\n    {\n      var deprecatedAPIs = {\n        isMounted: [\"isMounted\", \"Instead, make sure to clean up subscriptions and pending requests in \" + \"componentWillUnmount to prevent memory leaks.\"],\n        replaceState: [\"replaceState\", \"Refactor your code to use setState instead (see \" + \"https://github.com/facebook/react/issues/3236).\"]\n      };\n      var defineDeprecationWarning = function (methodName, info) {\n        Object.defineProperty(Component.prototype, methodName, {\n          get: function () {\n            lowPriorityWarning$1(false, \"%s(...) is deprecated in plain JavaScript React classes. %s\", info[0], info[1]);\n            return undefined;\n          }\n        });\n      };\n      for (var fnName in deprecatedAPIs) {\n        if (deprecatedAPIs.hasOwnProperty(fnName)) {\n          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n        }\n      }\n    }\n    function ComponentDummy() {}\n    ComponentDummy.prototype = Component.prototype;\n    function PureComponent(props, context, updater) {\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n    }\n    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\n    pureComponentPrototype.constructor = PureComponent;\n    _assign(pureComponentPrototype, Component.prototype);\n    pureComponentPrototype.isPureReactComponent = true;\n    function createRef() {\n      var refObject = {\n        current: null\n      };\n      {\n        Object.seal(refObject);\n      }\n      return refObject;\n    }\n    var ReactCurrentDispatcher = {\n      current: null\n    };\n    var ReactCurrentBatchConfig = {\n      suspense: null\n    };\n    var ReactCurrentOwner = {\n      current: null\n    };\n    var BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n    var describeComponentFrame = function (name, source, ownerName) {\n      var sourceInfo = \"\";\n      if (source) {\n        var path = source.fileName;\n        var fileName = path.replace(BEFORE_SLASH_RE, \"\");\n        {\n          if ((/^index\\./).test(fileName)) {\n            var match = path.match(BEFORE_SLASH_RE);\n            if (match) {\n              var pathBeforeSlash = match[1];\n              if (pathBeforeSlash) {\n                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, \"\");\n                fileName = folderName + \"/\" + fileName;\n              }\n            }\n          }\n        }\n        sourceInfo = \" (at \" + fileName + \":\" + source.lineNumber + \")\";\n      } else if (ownerName) {\n        sourceInfo = \" (created by \" + ownerName + \")\";\n      }\n      return \"\\n    in \" + (name || \"Unknown\") + sourceInfo;\n    };\n    var Resolved = 1;\n    function refineResolvedLazyComponent(lazyComponent) {\n      return lazyComponent._status === Resolved ? lazyComponent._result : null;\n    }\n    function getWrappedName(outerType, innerType, wrapperName) {\n      var functionName = innerType.displayName || innerType.name || \"\";\n      return outerType.displayName || (functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n    }\n    function getComponentName(type) {\n      if (type == null) {\n        return null;\n      }\n      {\n        if (typeof type.tag === \"number\") {\n          warningWithoutStack$1(false, \"Received an unexpected object in getComponentName(). \" + \"This is likely a bug in React. Please file an issue.\");\n        }\n      }\n      if (typeof type === \"function\") {\n        return type.displayName || type.name || null;\n      }\n      if (typeof type === \"string\") {\n        return type;\n      }\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PORTAL_TYPE:\n          return \"Portal\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n      }\n      if (typeof type === \"object\") {\n        switch (type.$$typeof) {\n          case REACT_CONTEXT_TYPE:\n            return \"Context.Consumer\";\n          case REACT_PROVIDER_TYPE:\n            return \"Context.Provider\";\n          case REACT_FORWARD_REF_TYPE:\n            return getWrappedName(type, type.render, \"ForwardRef\");\n          case REACT_MEMO_TYPE:\n            return getComponentName(type.type);\n          case REACT_LAZY_TYPE:\n            {\n              var thenable = type;\n              var resolvedThenable = refineResolvedLazyComponent(thenable);\n              if (resolvedThenable) {\n                return getComponentName(resolvedThenable);\n              }\n              break;\n            }\n        }\n      }\n      return null;\n    }\n    var ReactDebugCurrentFrame = {};\n    var currentlyValidatingElement = null;\n    function setCurrentlyValidatingElement(element) {\n      {\n        currentlyValidatingElement = element;\n      }\n    }\n    {\n      ReactDebugCurrentFrame.getCurrentStack = null;\n      ReactDebugCurrentFrame.getStackAddendum = function () {\n        var stack = \"\";\n        if (currentlyValidatingElement) {\n          var name = getComponentName(currentlyValidatingElement.type);\n          var owner = currentlyValidatingElement._owner;\n          stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));\n        }\n        var impl = ReactDebugCurrentFrame.getCurrentStack;\n        if (impl) {\n          stack += impl() || \"\";\n        }\n        return stack;\n      };\n    }\n    var IsSomeRendererActing = {\n      current: false\n    };\n    var ReactSharedInternals = {\n      ReactCurrentDispatcher: ReactCurrentDispatcher,\n      ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n      ReactCurrentOwner: ReactCurrentOwner,\n      IsSomeRendererActing: IsSomeRendererActing,\n      assign: _assign\n    };\n    {\n      _assign(ReactSharedInternals, {\n        ReactDebugCurrentFrame: ReactDebugCurrentFrame,\n        ReactComponentTreeHook: {}\n      });\n    }\n    var warning = warningWithoutStack$1;\n    {\n      warning = function (condition, format) {\n        if (condition) {\n          return;\n        }\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var stack = ReactDebugCurrentFrame.getStackAddendum();\n        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n          args[_key - 2] = arguments[_key];\n        }\n        warningWithoutStack$1.apply(undefined, [false, format + \"%s\"].concat(args, [stack]));\n      };\n    }\n    var warning$1 = warning;\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    var RESERVED_PROPS = {\n      key: true,\n      ref: true,\n      __self: true,\n      __source: true\n    };\n    var specialPropKeyWarningShown = void 0;\n    var specialPropRefWarningShown = void 0;\n    function hasValidRef(config) {\n      {\n        if (hasOwnProperty.call(config, \"ref\")) {\n          var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n          if (getter && getter.isReactWarning) {\n            return false;\n          }\n        }\n      }\n      return config.ref !== undefined;\n    }\n    function hasValidKey(config) {\n      {\n        if (hasOwnProperty.call(config, \"key\")) {\n          var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n          if (getter && getter.isReactWarning) {\n            return false;\n          }\n        }\n      }\n      return config.key !== undefined;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      var warnAboutAccessingKey = function () {\n        if (!specialPropKeyWarningShown) {\n          specialPropKeyWarningShown = true;\n          warningWithoutStack$1(false, \"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://fb.me/react-special-props)\", displayName);\n        }\n      };\n      warnAboutAccessingKey.isReactWarning = true;\n      Object.defineProperty(props, \"key\", {\n        get: warnAboutAccessingKey,\n        configurable: true\n      });\n    }\n    function defineRefPropWarningGetter(props, displayName) {\n      var warnAboutAccessingRef = function () {\n        if (!specialPropRefWarningShown) {\n          specialPropRefWarningShown = true;\n          warningWithoutStack$1(false, \"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://fb.me/react-special-props)\", displayName);\n        }\n      };\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, \"ref\", {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n    var ReactElement = function (type, key, ref, self, source, owner, props) {\n      var element = {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key,\n        ref: ref,\n        props: props,\n        _owner: owner\n      };\n      {\n        element._store = {};\n        Object.defineProperty(element._store, \"validated\", {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: false\n        });\n        Object.defineProperty(element, \"_self\", {\n          configurable: false,\n          enumerable: false,\n          writable: false,\n          value: self\n        });\n        Object.defineProperty(element, \"_source\", {\n          configurable: false,\n          enumerable: false,\n          writable: false,\n          value: source\n        });\n        if (Object.freeze) {\n          Object.freeze(element.props);\n          Object.freeze(element);\n        }\n      }\n      return element;\n    };\n    function jsxDEV(type, config, maybeKey, source, self) {\n      var propName = void 0;\n      var props = {};\n      var key = null;\n      var ref = null;\n      if (hasValidRef(config)) {\n        ref = config.ref;\n      }\n      if (hasValidKey(config)) {\n        key = \"\" + config.key;\n      }\n      for (propName in config) {\n        if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n          props[propName] = config[propName];\n        }\n      }\n      if (maybeKey !== undefined) {\n        key = \"\" + maybeKey;\n      }\n      if (type && type.defaultProps) {\n        var defaultProps = type.defaultProps;\n        for (propName in defaultProps) {\n          if (props[propName] === undefined) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n      }\n      if (key || ref) {\n        var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n        if (key) {\n          defineKeyPropWarningGetter(props, displayName);\n        }\n        if (ref) {\n          defineRefPropWarningGetter(props, displayName);\n        }\n      }\n      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n    }\n    function createElement(type, config, children) {\n      var propName = void 0;\n      var props = {};\n      var key = null;\n      var ref = null;\n      var self = null;\n      var source = null;\n      if (config != null) {\n        if (hasValidRef(config)) {\n          ref = config.ref;\n        }\n        if (hasValidKey(config)) {\n          key = \"\" + config.key;\n        }\n        self = config.__self === undefined ? null : config.__self;\n        source = config.__source === undefined ? null : config.__source;\n        for (propName in config) {\n          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n            props[propName] = config[propName];\n          }\n        }\n      }\n      var childrenLength = arguments.length - 2;\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 2];\n        }\n        {\n          if (Object.freeze) {\n            Object.freeze(childArray);\n          }\n        }\n        props.children = childArray;\n      }\n      if (type && type.defaultProps) {\n        var defaultProps = type.defaultProps;\n        for (propName in defaultProps) {\n          if (props[propName] === undefined) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n      }\n      {\n        if (key || ref) {\n          var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n          if (key) {\n            defineKeyPropWarningGetter(props, displayName);\n          }\n          if (ref) {\n            defineRefPropWarningGetter(props, displayName);\n          }\n        }\n      }\n      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n    }\n    function cloneAndReplaceKey(oldElement, newKey) {\n      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n      return newElement;\n    }\n    function cloneElement(element, config, children) {\n      (function () {\n        if (!!(element === null || element === undefined)) {\n          {\n            throw ReactError(Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\"));\n          }\n        }\n      })();\n      var propName = void 0;\n      var props = _assign({}, element.props);\n      var key = element.key;\n      var ref = element.ref;\n      var self = element._self;\n      var source = element._source;\n      var owner = element._owner;\n      if (config != null) {\n        if (hasValidRef(config)) {\n          ref = config.ref;\n          owner = ReactCurrentOwner.current;\n        }\n        if (hasValidKey(config)) {\n          key = \"\" + config.key;\n        }\n        var defaultProps = void 0;\n        if (element.type && element.type.defaultProps) {\n          defaultProps = element.type.defaultProps;\n        }\n        for (propName in config) {\n          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n            if (config[propName] === undefined && defaultProps !== undefined) {\n              props[propName] = defaultProps[propName];\n            } else {\n              props[propName] = config[propName];\n            }\n          }\n        }\n      }\n      var childrenLength = arguments.length - 2;\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 2];\n        }\n        props.children = childArray;\n      }\n      return ReactElement(element.type, key, ref, self, source, owner, props);\n    }\n    function isValidElement(object) {\n      return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n    }\n    var SEPARATOR = \".\";\n    var SUBSEPARATOR = \":\";\n    function escape(key) {\n      var escapeRegex = /[=:]/g;\n      var escaperLookup = {\n        \"=\": \"=0\",\n        \":\": \"=2\"\n      };\n      var escapedString = (\"\" + key).replace(escapeRegex, function (match) {\n        return escaperLookup[match];\n      });\n      return \"$\" + escapedString;\n    }\n    var didWarnAboutMaps = false;\n    var userProvidedKeyEscapeRegex = /\\/+/g;\n    function escapeUserProvidedKey(text) {\n      return (\"\" + text).replace(userProvidedKeyEscapeRegex, \"$&/\");\n    }\n    var POOL_SIZE = 10;\n    var traverseContextPool = [];\n    function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {\n      if (traverseContextPool.length) {\n        var traverseContext = traverseContextPool.pop();\n        traverseContext.result = mapResult;\n        traverseContext.keyPrefix = keyPrefix;\n        traverseContext.func = mapFunction;\n        traverseContext.context = mapContext;\n        traverseContext.count = 0;\n        return traverseContext;\n      } else {\n        return {\n          result: mapResult,\n          keyPrefix: keyPrefix,\n          func: mapFunction,\n          context: mapContext,\n          count: 0\n        };\n      }\n    }\n    function releaseTraverseContext(traverseContext) {\n      traverseContext.result = null;\n      traverseContext.keyPrefix = null;\n      traverseContext.func = null;\n      traverseContext.context = null;\n      traverseContext.count = 0;\n      if (traverseContextPool.length < POOL_SIZE) {\n        traverseContextPool.push(traverseContext);\n      }\n    }\n    function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n      var type = typeof children;\n      if (type === \"undefined\" || type === \"boolean\") {\n        children = null;\n      }\n      var invokeCallback = false;\n      if (children === null) {\n        invokeCallback = true;\n      } else {\n        switch (type) {\n          case \"string\":\n          case \"number\":\n            invokeCallback = true;\n            break;\n          case \"object\":\n            switch (children.$$typeof) {\n              case REACT_ELEMENT_TYPE:\n              case REACT_PORTAL_TYPE:\n                invokeCallback = true;\n            }\n        }\n      }\n      if (invokeCallback) {\n        callback(traverseContext, children, nameSoFar === \"\" ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n        return 1;\n      }\n      var child = void 0;\n      var nextName = void 0;\n      var subtreeCount = 0;\n      var nextNamePrefix = nameSoFar === \"\" ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n      if (Array.isArray(children)) {\n        for (var i = 0; i < children.length; i++) {\n          child = children[i];\n          nextName = nextNamePrefix + getComponentKey(child, i);\n          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n        }\n      } else {\n        var iteratorFn = getIteratorFn(children);\n        if (typeof iteratorFn === \"function\") {\n          {\n            if (iteratorFn === children.entries) {\n              !didWarnAboutMaps ? warning$1(false, \"Using Maps as children is unsupported and will likely yield \" + \"unexpected results. Convert it to a sequence/iterable of keyed \" + \"ReactElements instead.\") : void 0;\n              didWarnAboutMaps = true;\n            }\n          }\n          var iterator = iteratorFn.call(children);\n          var step = void 0;\n          var ii = 0;\n          while (!(step = iterator.next()).done) {\n            child = step.value;\n            nextName = nextNamePrefix + getComponentKey(child, ii++);\n            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n          }\n        } else if (type === \"object\") {\n          var addendum = \"\";\n          {\n            addendum = \" If you meant to render a collection of children, use an array \" + \"instead.\" + ReactDebugCurrentFrame.getStackAddendum();\n          }\n          var childrenString = \"\" + children;\n          (function () {\n            {\n              {\n                throw ReactError(Error(\"Objects are not valid as a React child (found: \" + (childrenString === \"[object Object]\" ? \"object with keys {\" + Object.keys(children).join(\", \") + \"}\" : childrenString) + \").\" + addendum));\n              }\n            }\n          })();\n        }\n      }\n      return subtreeCount;\n    }\n    function traverseAllChildren(children, callback, traverseContext) {\n      if (children == null) {\n        return 0;\n      }\n      return traverseAllChildrenImpl(children, \"\", callback, traverseContext);\n    }\n    function getComponentKey(component, index) {\n      if (typeof component === \"object\" && component !== null && component.key != null) {\n        return escape(component.key);\n      }\n      return index.toString(36);\n    }\n    function forEachSingleChild(bookKeeping, child, name) {\n      var func = bookKeeping.func, context = bookKeeping.context;\n      func.call(context, child, bookKeeping.count++);\n    }\n    function forEachChildren(children, forEachFunc, forEachContext) {\n      if (children == null) {\n        return children;\n      }\n      var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);\n      traverseAllChildren(children, forEachSingleChild, traverseContext);\n      releaseTraverseContext(traverseContext);\n    }\n    function mapSingleChildIntoContext(bookKeeping, child, childKey) {\n      var result = bookKeeping.result, keyPrefix = bookKeeping.keyPrefix, func = bookKeeping.func, context = bookKeeping.context;\n      var mappedChild = func.call(context, child, bookKeeping.count++);\n      if (Array.isArray(mappedChild)) {\n        mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {\n          return c;\n        });\n      } else if (mappedChild != null) {\n        if (isValidElement(mappedChild)) {\n          mappedChild = cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + \"/\" : \"\") + childKey);\n        }\n        result.push(mappedChild);\n      }\n    }\n    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n      var escapedPrefix = \"\";\n      if (prefix != null) {\n        escapedPrefix = escapeUserProvidedKey(prefix) + \"/\";\n      }\n      var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);\n      traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n      releaseTraverseContext(traverseContext);\n    }\n    function mapChildren(children, func, context) {\n      if (children == null) {\n        return children;\n      }\n      var result = [];\n      mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n      return result;\n    }\n    function countChildren(children) {\n      return traverseAllChildren(children, function () {\n        return null;\n      }, null);\n    }\n    function toArray(children) {\n      var result = [];\n      mapIntoWithKeyPrefixInternal(children, result, null, function (child) {\n        return child;\n      });\n      return result;\n    }\n    function onlyChild(children) {\n      (function () {\n        if (!isValidElement(children)) {\n          {\n            throw ReactError(Error(\"React.Children.only expected to receive a single React element child.\"));\n          }\n        }\n      })();\n      return children;\n    }\n    function createContext(defaultValue, calculateChangedBits) {\n      if (calculateChangedBits === undefined) {\n        calculateChangedBits = null;\n      } else {\n        {\n          !(calculateChangedBits === null || typeof calculateChangedBits === \"function\") ? warningWithoutStack$1(false, \"createContext: Expected the optional second argument to be a \" + \"function. Instead received: %s\", calculateChangedBits) : void 0;\n        }\n      }\n      var context = {\n        $$typeof: REACT_CONTEXT_TYPE,\n        _calculateChangedBits: calculateChangedBits,\n        _currentValue: defaultValue,\n        _currentValue2: defaultValue,\n        _threadCount: 0,\n        Provider: null,\n        Consumer: null\n      };\n      context.Provider = {\n        $$typeof: REACT_PROVIDER_TYPE,\n        _context: context\n      };\n      var hasWarnedAboutUsingNestedContextConsumers = false;\n      var hasWarnedAboutUsingConsumerProvider = false;\n      {\n        var Consumer = {\n          $$typeof: REACT_CONTEXT_TYPE,\n          _context: context,\n          _calculateChangedBits: context._calculateChangedBits\n        };\n        Object.defineProperties(Consumer, {\n          Provider: {\n            get: function () {\n              if (!hasWarnedAboutUsingConsumerProvider) {\n                hasWarnedAboutUsingConsumerProvider = true;\n                warning$1(false, \"Rendering <Context.Consumer.Provider> is not supported and will be removed in \" + \"a future major release. Did you mean to render <Context.Provider> instead?\");\n              }\n              return context.Provider;\n            },\n            set: function (_Provider) {\n              context.Provider = _Provider;\n            }\n          },\n          _currentValue: {\n            get: function () {\n              return context._currentValue;\n            },\n            set: function (_currentValue) {\n              context._currentValue = _currentValue;\n            }\n          },\n          _currentValue2: {\n            get: function () {\n              return context._currentValue2;\n            },\n            set: function (_currentValue2) {\n              context._currentValue2 = _currentValue2;\n            }\n          },\n          _threadCount: {\n            get: function () {\n              return context._threadCount;\n            },\n            set: function (_threadCount) {\n              context._threadCount = _threadCount;\n            }\n          },\n          Consumer: {\n            get: function () {\n              if (!hasWarnedAboutUsingNestedContextConsumers) {\n                hasWarnedAboutUsingNestedContextConsumers = true;\n                warning$1(false, \"Rendering <Context.Consumer.Consumer> is not supported and will be removed in \" + \"a future major release. Did you mean to render <Context.Consumer> instead?\");\n              }\n              return context.Consumer;\n            }\n          }\n        });\n        context.Consumer = Consumer;\n      }\n      {\n        context._currentRenderer = null;\n        context._currentRenderer2 = null;\n      }\n      return context;\n    }\n    function lazy(ctor) {\n      var lazyType = {\n        $$typeof: REACT_LAZY_TYPE,\n        _ctor: ctor,\n        _status: -1,\n        _result: null\n      };\n      {\n        var defaultProps = void 0;\n        var propTypes = void 0;\n        Object.defineProperties(lazyType, {\n          defaultProps: {\n            configurable: true,\n            get: function () {\n              return defaultProps;\n            },\n            set: function (newDefaultProps) {\n              warning$1(false, \"React.lazy(...): It is not supported to assign `defaultProps` to \" + \"a lazy component import. Either specify them where the component \" + \"is defined, or create a wrapping component around it.\");\n              defaultProps = newDefaultProps;\n              Object.defineProperty(lazyType, \"defaultProps\", {\n                enumerable: true\n              });\n            }\n          },\n          propTypes: {\n            configurable: true,\n            get: function () {\n              return propTypes;\n            },\n            set: function (newPropTypes) {\n              warning$1(false, \"React.lazy(...): It is not supported to assign `propTypes` to \" + \"a lazy component import. Either specify them where the component \" + \"is defined, or create a wrapping component around it.\");\n              propTypes = newPropTypes;\n              Object.defineProperty(lazyType, \"propTypes\", {\n                enumerable: true\n              });\n            }\n          }\n        });\n      }\n      return lazyType;\n    }\n    function forwardRef(render) {\n      {\n        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n          warningWithoutStack$1(false, \"forwardRef requires a render function but received a `memo` \" + \"component. Instead of forwardRef(memo(...)), use \" + \"memo(forwardRef(...)).\");\n        } else if (typeof render !== \"function\") {\n          warningWithoutStack$1(false, \"forwardRef requires a render function but was given %s.\", render === null ? \"null\" : typeof render);\n        } else {\n          !(render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, \"forwardRef render functions accept exactly two parameters: props and ref. %s\", render.length === 1 ? \"Did you forget to use the ref parameter?\" : \"Any additional parameter will be undefined.\") : void 0;\n        }\n        if (render != null) {\n          !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, \"forwardRef render functions do not support propTypes or defaultProps. \" + \"Did you accidentally pass a React component?\") : void 0;\n        }\n      }\n      return {\n        $$typeof: REACT_FORWARD_REF_TYPE,\n        render: render\n      };\n    }\n    function isValidElementType(type) {\n      return typeof type === \"string\" || typeof type === \"function\" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === \"object\" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE);\n    }\n    function memo(type, compare) {\n      {\n        if (!isValidElementType(type)) {\n          warningWithoutStack$1(false, \"memo: The first argument must be a component. Instead \" + \"received: %s\", type === null ? \"null\" : typeof type);\n        }\n      }\n      return {\n        $$typeof: REACT_MEMO_TYPE,\n        type: type,\n        compare: compare === undefined ? null : compare\n      };\n    }\n    function resolveDispatcher() {\n      var dispatcher = ReactCurrentDispatcher.current;\n      (function () {\n        if (!(dispatcher !== null)) {\n          {\n            throw ReactError(Error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.\"));\n          }\n        }\n      })();\n      return dispatcher;\n    }\n    function useContext(Context, unstable_observedBits) {\n      var dispatcher = resolveDispatcher();\n      {\n        !(unstable_observedBits === undefined) ? warning$1(false, \"useContext() second argument is reserved for future \" + \"use in React. Passing it is not supported. \" + \"You passed: %s.%s\", unstable_observedBits, typeof unstable_observedBits === \"number\" && Array.isArray(arguments[2]) ? \"\\n\\nDid you call array.map(useContext)? \" + \"Calling Hooks inside a loop is not supported. \" + \"Learn more at https://fb.me/rules-of-hooks\" : \"\") : void 0;\n        if (Context._context !== undefined) {\n          var realContext = Context._context;\n          if (realContext.Consumer === Context) {\n            warning$1(false, \"Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be \" + \"removed in a future major release. Did you mean to call useContext(Context) instead?\");\n          } else if (realContext.Provider === Context) {\n            warning$1(false, \"Calling useContext(Context.Provider) is not supported. \" + \"Did you mean to call useContext(Context) instead?\");\n          }\n        }\n      }\n      return dispatcher.useContext(Context, unstable_observedBits);\n    }\n    function useState(initialState) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useState(initialState);\n    }\n    function useReducer(reducer, initialArg, init) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useReducer(reducer, initialArg, init);\n    }\n    function useRef(initialValue) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useRef(initialValue);\n    }\n    function useEffect(create, inputs) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useEffect(create, inputs);\n    }\n    function useLayoutEffect(create, inputs) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useLayoutEffect(create, inputs);\n    }\n    function useCallback(callback, inputs) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useCallback(callback, inputs);\n    }\n    function useMemo(create, inputs) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useMemo(create, inputs);\n    }\n    function useImperativeHandle(ref, create, inputs) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useImperativeHandle(ref, create, inputs);\n    }\n    function useDebugValue(value, formatterFn) {\n      {\n        var dispatcher = resolveDispatcher();\n        return dispatcher.useDebugValue(value, formatterFn);\n      }\n    }\n    var emptyObject$1 = {};\n    function useResponder(responder, listenerProps) {\n      var dispatcher = resolveDispatcher();\n      {\n        if (responder == null || responder.$$typeof !== REACT_RESPONDER_TYPE) {\n          warning$1(false, \"useResponder: invalid first argument. Expected an event responder, but instead got %s\", responder);\n          return;\n        }\n      }\n      return dispatcher.useResponder(responder, listenerProps || emptyObject$1);\n    }\n    function withSuspenseConfig(scope, config) {\n      var previousConfig = ReactCurrentBatchConfig.suspense;\n      ReactCurrentBatchConfig.suspense = config === undefined ? null : config;\n      try {\n        scope();\n      } finally {\n        ReactCurrentBatchConfig.suspense = previousConfig;\n      }\n    }\n    var propTypesMisspellWarningShown = void 0;\n    {\n      propTypesMisspellWarningShown = false;\n    }\n    function getDeclarationErrorAddendum() {\n      if (ReactCurrentOwner.current) {\n        var name = getComponentName(ReactCurrentOwner.current.type);\n        if (name) {\n          return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n        }\n      }\n      return \"\";\n    }\n    function getSourceInfoErrorAddendum(source) {\n      if (source !== undefined) {\n        var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n        var lineNumber = source.lineNumber;\n        return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n      }\n      return \"\";\n    }\n    function getSourceInfoErrorAddendumForProps(elementProps) {\n      if (elementProps !== null && elementProps !== undefined) {\n        return getSourceInfoErrorAddendum(elementProps.__source);\n      }\n      return \"\";\n    }\n    var ownerHasKeyUseWarning = {};\n    function getCurrentComponentErrorInfo(parentType) {\n      var info = getDeclarationErrorAddendum();\n      if (!info) {\n        var parentName = typeof parentType === \"string\" ? parentType : parentType.displayName || parentType.name;\n        if (parentName) {\n          info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n        }\n      }\n      return info;\n    }\n    function validateExplicitKey(element, parentType) {\n      if (!element._store || element._store.validated || element.key != null) {\n        return;\n      }\n      element._store.validated = true;\n      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n        return;\n      }\n      ownerHasKeyUseWarning[currentComponentErrorInfo] = true;\n      var childOwner = \"\";\n      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n        childOwner = \" It was passed a child from \" + getComponentName(element._owner.type) + \".\";\n      }\n      setCurrentlyValidatingElement(element);\n      {\n        warning$1(false, \"Each child in a list should have a unique \\\"key\\\" prop.\" + \"%s%s See https://fb.me/react-warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n      }\n      setCurrentlyValidatingElement(null);\n    }\n    function validateChildKeys(node, parentType) {\n      if (typeof node !== \"object\") {\n        return;\n      }\n      if (Array.isArray(node)) {\n        for (var i = 0; i < node.length; i++) {\n          var child = node[i];\n          if (isValidElement(child)) {\n            validateExplicitKey(child, parentType);\n          }\n        }\n      } else if (isValidElement(node)) {\n        if (node._store) {\n          node._store.validated = true;\n        }\n      } else if (node) {\n        var iteratorFn = getIteratorFn(node);\n        if (typeof iteratorFn === \"function\") {\n          if (iteratorFn !== node.entries) {\n            var iterator = iteratorFn.call(node);\n            var step = void 0;\n            while (!(step = iterator.next()).done) {\n              if (isValidElement(step.value)) {\n                validateExplicitKey(step.value, parentType);\n              }\n            }\n          }\n        }\n      }\n    }\n    function validatePropTypes(element) {\n      var type = element.type;\n      if (type === null || type === undefined || typeof type === \"string\") {\n        return;\n      }\n      var name = getComponentName(type);\n      var propTypes = void 0;\n      if (typeof type === \"function\") {\n        propTypes = type.propTypes;\n      } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {\n        propTypes = type.propTypes;\n      } else {\n        return;\n      }\n      if (propTypes) {\n        setCurrentlyValidatingElement(element);\n        checkPropTypes(propTypes, element.props, \"prop\", name, ReactDebugCurrentFrame.getStackAddendum);\n        setCurrentlyValidatingElement(null);\n      } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n        propTypesMisspellWarningShown = true;\n        warningWithoutStack$1(false, \"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", name || \"Unknown\");\n      }\n      if (typeof type.getDefaultProps === \"function\") {\n        !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, \"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\") : void 0;\n      }\n    }\n    function validateFragmentProps(fragment) {\n      setCurrentlyValidatingElement(fragment);\n      var keys = Object.keys(fragment.props);\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        if (key !== \"children\" && key !== \"key\") {\n          warning$1(false, \"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n          break;\n        }\n      }\n      if (fragment.ref !== null) {\n        warning$1(false, \"Invalid attribute `ref` supplied to `React.Fragment`.\");\n      }\n      setCurrentlyValidatingElement(null);\n    }\n    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n      var validType = isValidElementType(type);\n      if (!validType) {\n        var info = \"\";\n        if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n          info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n        }\n        var sourceInfo = getSourceInfoErrorAddendum(source);\n        if (sourceInfo) {\n          info += sourceInfo;\n        } else {\n          info += getDeclarationErrorAddendum();\n        }\n        var typeString = void 0;\n        if (type === null) {\n          typeString = \"null\";\n        } else if (Array.isArray(type)) {\n          typeString = \"array\";\n        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n          typeString = \"<\" + (getComponentName(type.type) || \"Unknown\") + \" />\";\n          info = \" Did you accidentally export a JSX literal instead of a component?\";\n        } else {\n          typeString = typeof type;\n        }\n        warning$1(false, \"React.jsx: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n      }\n      var element = jsxDEV(type, props, key, source, self);\n      if (element == null) {\n        return element;\n      }\n      if (validType) {\n        var children = props.children;\n        if (children !== undefined) {\n          if (isStaticChildren) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n          } else {\n            validateChildKeys(children, type);\n          }\n        }\n      }\n      if (props.key !== undefined) {\n        warning$1(false, \"React.jsx: Spreading a key to JSX is a deprecated pattern. \" + \"Explicitly pass a key after spreading props in your JSX call. \" + \"E.g. <ComponentName {...props} key={key} />\");\n      }\n      if (type === REACT_FRAGMENT_TYPE) {\n        validateFragmentProps(element);\n      } else {\n        validatePropTypes(element);\n      }\n      return element;\n    }\n    function jsxWithValidationStatic(type, props, key) {\n      return jsxWithValidation(type, props, key, true);\n    }\n    function jsxWithValidationDynamic(type, props, key) {\n      return jsxWithValidation(type, props, key, false);\n    }\n    function createElementWithValidation(type, props, children) {\n      var validType = isValidElementType(type);\n      if (!validType) {\n        var info = \"\";\n        if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n          info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n        }\n        var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n        if (sourceInfo) {\n          info += sourceInfo;\n        } else {\n          info += getDeclarationErrorAddendum();\n        }\n        var typeString = void 0;\n        if (type === null) {\n          typeString = \"null\";\n        } else if (Array.isArray(type)) {\n          typeString = \"array\";\n        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n          typeString = \"<\" + (getComponentName(type.type) || \"Unknown\") + \" />\";\n          info = \" Did you accidentally export a JSX literal instead of a component?\";\n        } else {\n          typeString = typeof type;\n        }\n        warning$1(false, \"React.createElement: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n      }\n      var element = createElement.apply(this, arguments);\n      if (element == null) {\n        return element;\n      }\n      if (validType) {\n        for (var i = 2; i < arguments.length; i++) {\n          validateChildKeys(arguments[i], type);\n        }\n      }\n      if (type === REACT_FRAGMENT_TYPE) {\n        validateFragmentProps(element);\n      } else {\n        validatePropTypes(element);\n      }\n      return element;\n    }\n    function createFactoryWithValidation(type) {\n      var validatedFactory = createElementWithValidation.bind(null, type);\n      validatedFactory.type = type;\n      {\n        Object.defineProperty(validatedFactory, \"type\", {\n          enumerable: false,\n          get: function () {\n            lowPriorityWarning$1(false, \"Factory.type is deprecated. Access the class directly \" + \"before passing it to createFactory.\");\n            Object.defineProperty(this, \"type\", {\n              value: type\n            });\n            return type;\n          }\n        });\n      }\n      return validatedFactory;\n    }\n    function cloneElementWithValidation(element, props, children) {\n      var newElement = cloneElement.apply(this, arguments);\n      for (var i = 2; i < arguments.length; i++) {\n        validateChildKeys(arguments[i], newElement.type);\n      }\n      validatePropTypes(newElement);\n      return newElement;\n    }\n    var hasBadMapPolyfill = void 0;\n    {\n      hasBadMapPolyfill = false;\n      try {\n        var frozenObject = Object.freeze({});\n        var testMap = new Map([[frozenObject, null]]);\n        var testSet = new Set([frozenObject]);\n        testMap.set(0, 0);\n        testSet.add(0);\n      } catch (e) {\n        hasBadMapPolyfill = true;\n      }\n    }\n    function createFundamentalComponent(impl) {\n      if (true && !hasBadMapPolyfill) {\n        Object.freeze(impl);\n      }\n      var fundamantalComponent = {\n        $$typeof: REACT_FUNDAMENTAL_TYPE,\n        impl: impl\n      };\n      {\n        Object.freeze(fundamantalComponent);\n      }\n      return fundamantalComponent;\n    }\n    function createEventResponder(displayName, responderConfig) {\n      var getInitialState = responderConfig.getInitialState, onEvent = responderConfig.onEvent, onMount = responderConfig.onMount, onUnmount = responderConfig.onUnmount, onOwnershipChange = responderConfig.onOwnershipChange, onRootEvent = responderConfig.onRootEvent, rootEventTypes = responderConfig.rootEventTypes, targetEventTypes = responderConfig.targetEventTypes;\n      var eventResponder = {\n        $$typeof: REACT_RESPONDER_TYPE,\n        displayName: displayName,\n        getInitialState: getInitialState || null,\n        onEvent: onEvent || null,\n        onMount: onMount || null,\n        onOwnershipChange: onOwnershipChange || null,\n        onRootEvent: onRootEvent || null,\n        onUnmount: onUnmount || null,\n        rootEventTypes: rootEventTypes || null,\n        targetEventTypes: targetEventTypes || null\n      };\n      if (true && !hasBadMapPolyfill) {\n        Object.freeze(eventResponder);\n      }\n      return eventResponder;\n    }\n    var enableFlareAPI = false;\n    var enableFundamentalAPI = false;\n    var enableJSXTransformAPI = false;\n    var React = {\n      Children: {\n        map: mapChildren,\n        forEach: forEachChildren,\n        count: countChildren,\n        toArray: toArray,\n        only: onlyChild\n      },\n      createRef: createRef,\n      Component: Component,\n      PureComponent: PureComponent,\n      createContext: createContext,\n      forwardRef: forwardRef,\n      lazy: lazy,\n      memo: memo,\n      useCallback: useCallback,\n      useContext: useContext,\n      useEffect: useEffect,\n      useImperativeHandle: useImperativeHandle,\n      useDebugValue: useDebugValue,\n      useLayoutEffect: useLayoutEffect,\n      useMemo: useMemo,\n      useReducer: useReducer,\n      useRef: useRef,\n      useState: useState,\n      Fragment: REACT_FRAGMENT_TYPE,\n      Profiler: REACT_PROFILER_TYPE,\n      StrictMode: REACT_STRICT_MODE_TYPE,\n      Suspense: REACT_SUSPENSE_TYPE,\n      unstable_SuspenseList: REACT_SUSPENSE_LIST_TYPE,\n      createElement: createElementWithValidation,\n      cloneElement: cloneElementWithValidation,\n      createFactory: createFactoryWithValidation,\n      isValidElement: isValidElement,\n      version: ReactVersion,\n      unstable_withSuspenseConfig: withSuspenseConfig,\n      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals\n    };\n    if (enableFlareAPI) {\n      React.unstable_useResponder = useResponder;\n      React.unstable_createResponder = createEventResponder;\n    }\n    if (enableFundamentalAPI) {\n      React.unstable_createFundamental = createFundamentalComponent;\n    }\n    if (enableJSXTransformAPI) {\n      {\n        React.jsxDEV = jsxWithValidation;\n        React.jsx = jsxWithValidationDynamic;\n        React.jsxs = jsxWithValidationStatic;\n      }\n    }\n    var React$2 = Object.freeze({\n      default: React\n    });\n    var React$3 = React$2 && React || React$2;\n    var react = React$3.default || React$3;\n    module.exports = react;\n  })();\n}\n\n});\n\t___scope___.entry = \"index.js\";\n})"}