{"mtime":1566839949666,"fastAnalysis":{"imports":[{"type":1,"statement":"express"},{"type":1,"statement":"fs"},{"type":1,"statement":"path"},{"type":1,"statement":"react"},{"type":1,"statement":"react-dom/server"},{"type":1,"statement":"react-router-dom"},{"type":1,"statement":"./app/App"},{"type":1,"statement":"./app/Router"},{"type":2,"statement":"tslib"}],"report":{"es6Syntax":true,"contains__dirname":true,"statementsReplaced":true,"transpiled":true},"replaceable":[]},"contents":"___scope___.file(\"src/server.jsx\", function(exports, require, module){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst express = require(\"express\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst React = require(\"react\");\nconst ReactDOMServer = require(\"react-dom/server\");\nconst react_router_dom_1 = require(\"react-router-dom\");\nconst App_1 = require(\"./app/App\");\nconst Router_1 = require(\"./app/Router\");\nasync function launch() {\n    const serverRoutes = await Router_1.createServerRoutes();\n    const app = express();\n    const browserRoot = path.resolve(__dirname, '../browser');\n    app.use('/public', express.static(browserRoot));\n    const port = 3000;\n    app.get('*', (req, res) => {\n        const indexFile = fs.readFileSync(path.resolve(browserRoot, 'index.html')).toString();\n        const context = {};\n        const reactAppAsString = ReactDOMServer.renderToString(React.createElement(react_router_dom_1.StaticRouter, { location: req.url, context: context },\n            React.createElement(App_1.App, { routes: serverRoutes })));\n        const app = indexFile.replace(/\\{\\{\\s*ssr\\s*\\}\\}/, reactAppAsString);\n        if (context.url) {\n            res.writeHead(301, {\n                Location: context.url,\n            });\n            res.end();\n        }\n        else {\n            res.send(app);\n        }\n    });\n    const server = app.listen(port, () => console.log(`Example app listening on port ${port}!`));\n}\nlaunch();\n// https://github.com/inikulin/callsite-record\n//# sourceMappingURL=server.js.map\n});","sourceMap":"{\"version\":3,\"sources\":[\"/Users/nc/work/fuse-box/sandbox/react-universal/src/server.tsx\"],\"names\":[],\"mappings\":\";;;AAAA,mCAAmC;AACnC,yBAAyB;AACzB,6BAA6B;AAC7B,+BAA+B;AAC/B,mDAAmD;AACnD,uDAAgD;AAChD,mCAAgC;AAChC,yCAAkD;AAElD,KAAK,UAAU,MAAM;IACnB,MAAM,YAAY,GAAG,MAAM,2BAAkB,EAAE,CAAC;IAEhD,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;IAEtB,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;IAC1D,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;IAEhD,MAAM,IAAI,GAAG,IAAI,CAAC;IAElB,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QACxB,MAAM,SAAS,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QACtF,MAAM,OAAO,GAAQ,EAAE,CAAC;QAExB,MAAM,gBAAgB,GAAG,cAAc,CAAC,cAAc,CACpD,oBAAC,+BAAY,IAAC,QAAQ,EAAE,GAAG,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO;YAC/C,oBAAC,SAAG,IAAC,MAAM,EAAE,YAAY,GAAI,CAChB,CAChB,CAAC;QACF,MAAM,GAAG,GAAG,SAAS,CAAC,OAAO,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;QACrE,IAAI,OAAO,CAAC,GAAG,EAAE;YACf,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE;gBACjB,QAAQ,EAAE,OAAO,CAAC,GAAG;aACtB,CAAC,CAAC;YACH,GAAG,CAAC,GAAG,EAAE,CAAC;SACX;aAAM;YACL,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACf;IACH,CAAC,CAAC,CAAC;IAEH,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,iCAAiC,IAAI,GAAG,CAAC,CAAC,CAAC;AAC/F,CAAC;AAED,MAAM,EAAE,CAAC;AAET,8CAA8C\",\"file\":\"\",\"sourcesContent\":[\"import * as express from 'express';\\nimport * as fs from 'fs';\\nimport * as path from 'path';\\nimport * as React from 'react';\\nimport * as ReactDOMServer from 'react-dom/server';\\nimport { StaticRouter } from 'react-router-dom';\\nimport { App } from './app/App';\\nimport { createServerRoutes } from './app/Router';\\n\\nasync function launch() {\\n  const serverRoutes = await createServerRoutes();\\n\\n  const app = express();\\n\\n  const browserRoot = path.resolve(__dirname, '../browser');\\n  app.use('/public', express.static(browserRoot));\\n\\n  const port = 3000;\\n\\n  app.get('*', (req, res) => {\\n    const indexFile = fs.readFileSync(path.resolve(browserRoot, 'index.html')).toString();\\n    const context: any = {};\\n\\n    const reactAppAsString = ReactDOMServer.renderToString(\\n      <StaticRouter location={req.url} context={context}>\\n        <App routes={serverRoutes} />\\n      </StaticRouter>,\\n    );\\n    const app = indexFile.replace(/\\\\{\\\\{\\\\s*ssr\\\\s*\\\\}\\\\}/, reactAppAsString);\\n    if (context.url) {\\n      res.writeHead(301, {\\n        Location: context.url,\\n      });\\n      res.end();\\n    } else {\\n      res.send(app);\\n    }\\n  });\\n\\n  const server = app.listen(port, () => console.log(`Example app listening on port ${port}!`));\\n}\\n\\nlaunch();\\n\\n// https://github.com/inikulin/callsite-record\\n\"]}","absPath":"/Users/nc/work/fuse-box/sandbox/react-universal/src/server.tsx","extension":".tsx","fuseBoxPath":"src/server.jsx"}